# ESLint Rules and Coding Standards

This project follows strict TypeScript and React best practices enforced through ESLint v8.57.0. Follow these guidelines when writing code:

## Code Style

- Use 4-space indentation (configured in Prettier)
- Use double quotes for strings
- Include semicolons at the end of statements
- Maximum line length is 100 characters
- Use trailing commas in multiline object literals and arrays

## TypeScript Practices

- Explicitly type all function parameters and return values when not obvious
- Avoid using `any` type unless absolutely necessary
- Use type guards instead of type assertions when possible
- Prefer interfaces over type aliases for object types
- Use optional chaining (`?.`) and nullish coalescing (`??`) for nullable values
- Prefix unused parameters with underscore (e.g., `_args`)

## React Patterns

- Use functional components with hooks
- Prefer named exports over default exports
- Keep components small and focused on a single responsibility
- Extract reusable logic into custom hooks
- Use React.memo for performance optimization when appropriate
- Follow the React Hooks rules (don't call hooks conditionally)

## Cloudflare Workers Specifics

- Be mindful of globals specific to the Workers runtime
- Avoid browser-only APIs in server-rendered code
- Use proper error handling for async operations
- Don't use `window`, `document`, or other browser globals in components that might render on the server
- Always await async operations in server functions (no floating promises)

## Common ESLint Rules

- No unused variables (except those prefixed with `_`)
- No explicit `any` types without justification
- No console logs in production code (except warnings and errors)
- Enforce proper accessibility practices
- Keep code clean of debugger statements
- **File size limit of 200 lines of code** (excluding imports, comments, and blank lines)

Run `npm run lint` to check for issues and `npm run lint:fix` to automatically fix many common problems.
